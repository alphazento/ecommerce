<?php

namespace Zento\Backend\Http\Controllers\Api;

use Auth;
use Route;
use Storage;
use Zento\StoreFront\Consts;
use Zento\Kernel\Http\Controllers\ApiBaseController;
use Illuminate\Http\Request;
use Illuminate\Support\Str;

class FileUploadController extends ApiBaseController
{
    public function uploadFile(Request $request) {
        if(!$request->hasFile('file0')) {   
            return $this->error(422, 'upload file not found');
        }
        $file = $request->file('file0');
        if(!$file->isValid()) {
            return $this->error(422, 'invalid file upload');
        }

        return $this->saveFile($file, Route::input('folder', ''), Route::input('visibility'));
    }

    protected function saveFile($file, $folder, $visibility) {
        $strategy = $this->getStrategy($visibility);
        $fullFileName = Str::slug($file->getClientOriginalName());
        if (!in_array($folder, ['', '/'])) {
            $fullFileName = sprintf('%s/%s', $folder, $fullFileName);
        }

        $url = '/' . $fullFileName;
        switch($strategy) {
            case 'local':
                $url = $this->saveFile2Local($file, $fullFileName, $visibility, $folder);
                break;
            case 'cloud':
                $url = $this->saveFile2Cloud($file, $fullFileName, $visibility);
                break;
            case 'both':
                $url = $this->saveFile2Local($file, $fullFileName, $visibility, $folder);
                $this->saveFile2Cloud($file, $fullFileName, $visibility);
                break;
        }
        $file->delete();
        return $this->success(200)->withData(compact('url'));
    }

    protected function saveFile2Local($file, $fullFileName, $visibility, $folder) {
        $tempPath = $file->getPathname();
        $disk = config($visibility === 'public' ? Consts::PUBLIC_FILE_UPLOAD_STORAGE : Consts::PRIVATE_FILE_UPLOAD_STORAGE);
        $storage = Storage::disk($disk);
        if (!$storage->exists($folder)) {
            $storage->makeDirectory($folder);
        }
        $file->copy($file->getPathname(), $storage->path($fullFileName));
        return $storage->url($fullFileName);
    }

    protected function saveFile2Cloud($file, $fullFileName, $visibility) {
        $fullFileName = sprintf('%s/%s', $visibility, $fullFileName);
        $disk = config(CLOUD_STORAGE);
        Storage::disk($disk)->put($fullFileName, file_get_contents($file->getPathname()));
        return $storage->url($fullFileName);
    }

    protected function getStrategy($visibility) {
        return config($visibility === 'public' ? Consts::PUBLIC_FILE_UPLOAD_STORE_STRATEGY : Consts::PRIVATE_FILE_UPLOAD_STORE_STRATEGY, 'local');
    }
}
